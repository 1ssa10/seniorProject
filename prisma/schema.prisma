// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(uuid())
  username   String?   @unique
  password   String?
  name       String
  image      String?
  first_name String?
  last_name  String?
  isAdmin    Boolean   @default(false)
  DOB        DateTime
  gender     Gender?
  email      String    @unique
  created_at DateTime  @default(now())
  Rating     Rating[]
  Admin      Admin[]
  Profile    Profile[]
}

model Admin {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Profile {
  id     User    @relation(fields: [userId], references: [id])
  userId String
  image  String?
  BIO    String?

  @@id([userId])
}

model Film {
  id              String     @id @default(uuid())
  title           String
  description     String     @db.LongText
  age_restriction Int?
  language        String?
  duration        String
  image           String
  Actors          Actor[]
  Categories      Category[]
  directedby      Director   @relation(fields: [directorId], references: [id])
  directorId      String
  Rating          Rating[]
  trailer         String?
  AvgRating       AvgRating? @relation(fields: [avgRatingId], references: [id])
  avgRatingId     String?
}

model Actor {
  id          String    @id @default(uuid())
  first_name  String
  last_name   String
  age         Int?
  DOb         DateTime?
  nationality String?
  gender      Gender
  image       String
  Films       Film[]
}

model Director {
  id          String    @id @default(uuid())
  first_name  String
  last_name   String
  age         Int?
  DOb         DateTime?
  nationality String?
  gender      Gender
  image       String
  Films       Film[]
}

model Category {
  id        String @id @default(uuid())
  catergory String @unique
  Films     Film[]
}

model Rating {
  rater     User     @relation(fields: [userId], references: [id])
  userId    String
  film      Film     @relation(fields: [filmId], references: [id])
  filmId    String
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String
  date      DateTime
  nb_stars  Float

  @@id([userId, filmId])
}

model Comment {
  id             String   @id @default(uuid())
  comment_detail String   @db.LongText()
  Rating         Rating[]
}

view AvgRating {
  id      String @id @default(uuid())
  average Float
  Film    Film[]
}

enum Gender {
  male
  female
}

view avgrating {
  filmId  String @id
  average Float?
}
